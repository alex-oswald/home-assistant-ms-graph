@page "/calendar"
@using System.Text
@using Azure.Identity
@using Microsoft.Graph.Models
@implements IDisposable
@inject IGraphServiceClientManager GraphServiceClientManager
@inject ILogger<Calendar> Logger
@inject IDialogService DialogService

<PageTitle>Calendar</PageTitle>

<h1>Calendars - @name</h1>

<ul>
    @foreach (var name in calendarNames)
    {
        <li>@name</li>
    }
</ul>

<MudButton OnClick="@(async () => await ShowAuthDialog(new DeviceCodeInfo()))"></MudButton>

@code {
    private string name = "empty";
    private List<string> calendarNames = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("OnAfterRender first render");
        }
        else
        {
            Logger.LogInformation("OnAfterRender not first");
        }

        Logger.LogInformation("init");
        GraphServiceClientManager.OnDeviceCodeCallback += OnDeviceCodeCallback;

        await Task.Run(async () =>
        {
            Logger.LogInformation("Getting calendars");
            User? me = await GraphServiceClientManager.Client.Me.GetAsync();
            name = me.DisplayName;
            CalendarCollectionResponse? calendars = await GraphServiceClientManager.Client.Me.Calendars.GetAsync();
            foreach (var item in calendars?.Value?.Select(o => o.Name).ToList() ?? [])
            {
                if (!string.IsNullOrWhiteSpace(item))
                {
                    calendarNames.Add(item);
                }
            }
        });

    }

    private Task ShowAuthDialog(DeviceCodeInfo deviceCodeInfo)
    {
        Logger.LogInformation("Show auth dialog");

        var parameters = new DialogParameters<DeviceCodeCallbackDialog>
        {
            { x => x.DeviceCodeInfo, deviceCodeInfo },
        };

        var options = new DialogOptions
        {
            CloseButton = false,
            CloseOnEscapeKey = false,
            FullScreen = true,
        };

        return DialogService.ShowAsync<DeviceCodeCallbackDialog>("Authentication Required", parameters, options);
    }

    private async void OnDeviceCodeCallback(object sender, DeviceCodeCallbackEventArgs e)
    {
        Logger.LogInformation("Device code callback");
        await ShowAuthDialog(e.DeviceCodeInfo);
    }

    void IDisposable.Dispose()
    {
        GraphServiceClientManager.OnDeviceCodeCallback -= OnDeviceCodeCallback;
    }
}
